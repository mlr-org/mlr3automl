% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerRegrAuto.R
\name{LearnerRegrAuto}
\alias{LearnerRegrAuto}
\title{Regression AutoML Learner}
\description{
The \link{LearnerRegrAuto} is an automated machine learning (AutoML) system for regression tasks.
It combines preprocessing, a switch between multiple learners and hyperparameter tuning to find the best model for the given task.
}
\section{Debugging}{

Set \code{options(bbotk.debug)} to run the tuning in the in the main session.
Set \code{encapsulate_learner = FALSE} to remove encapsulation of the learner.
Set \code{encapsulate_mbo = FALSE} to catch no errors in mbo.
}

\section{Parameters}{

\describe{
\item{learner_timeout}{(\code{integer(1)})\cr
Timeout for training and predicting with a single learner.}
\item{n_threads}{(\code{integer(1)})\cr
Number of threads to use for model training.}
\item{memory_limit}{(\code{integer(1)})\cr
Memory limit for model training in MB.}
\item{devices}{(\code{character()})\cr
Devices to use for model training.
Possible values are \code{"cpu"} and \code{"cuda"}.
If \code{"cuda"}, the learner will be trained on a GPU.}
\item{large_data_size}{(\code{integer(1)})\cr
Threshold value for the data set size from which special rules apply.
Only the learners specified in \code{large_data_learner_ids} will be considered.
These learners can use up to \code{large_data_nthread} threads.}
\item{small_data_size}{(\code{integer(1)})\cr
Threshold value for the data set size from which special rules apply.}
\item{small_data_resampling}{(\link[mlr3:Resampling]{mlr3::Resampling})\cr
Resampling strategy to use for model training on small data sets.}
\item{initial_design_size}{(\code{integer(1)})\cr
Size of the initial design used for mbo.}
\item{initial_design_type}{(\code{character(1)})\cr
Type of the initial design used for mbo.
Possible values are \code{"default"}, \code{"lhs"}, \code{"set"}, \code{"random"}.
\code{"default"} uses the default design of the auto.
\code{"lhs"} uses a Latin Hypercube Sampling design.
\code{"set"} uses a set of design points.
\code{"random"} uses a random design.}
\item{adaptive_design}{(\code{logical(1)})\cr
Whether to use adaptive design.
If \code{TRUE}, the initial design will be adapted during the tuning process.}
\item{adaptive_design_fraction}{(\code{numeric(1)})\cr
Fraction of the budget to use for adaptive design.
If \code{adaptive_design} is \code{TRUE}, the initial design will be adapted during the tuning process.
The fraction of the budget to use for adaptive design.}
\item{resampling}{(\link[mlr3:Resampling]{mlr3::Resampling})\cr
Resampling strategy used for tuning.}
\item{terminator}{(\link[bbotk:Terminator]{bbotk::Terminator})\cr
Terminator criterion for tuning.}
\item{measure}{(\link[mlr3:Measure]{mlr3::Measure})\cr
Measure used for tuning.}
\item{callbacks}{(\link[mlr3tuning:CallbackAsyncTuning]{mlr3tuning::CallbackAsyncTuning})\cr
Callbacks used for tuning.}
\item{store_benchmark_result}{(\code{logical(1)})\cr
Whether to store the benchmark result.}
\item{store_models}{(\code{logical(1)})\cr
Whether to store the models.}
\item{encapsulate_learner}{(\code{logical(1)})\cr
Whether to encapsulate the learner.
Change to \code{FALSE} to debug.}
\item{encapsulate_mbo}{(\code{logical(1)})\cr
Whether to encapsulate the tuning.
Change to \code{FALSE} to debug.}
\item{check_learners}{(\code{logical(1)})\cr
Whether to check if the learners are compatible with the task.
Change to \code{FALSE} to debug.}
}
}

\section{Super class}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{LearnerRegrAuto}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tuning_space}}{(\code{list()}).}

\item{\code{instance}}{(\link[mlr3tuning:TuningInstanceAsyncSingleCrit]{mlr3tuning::TuningInstanceAsyncSingleCrit}).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerRegrAuto-new}{\code{LearnerRegrAuto$new()}}
\item \href{#method-LearnerRegrAuto-clone}{\code{LearnerRegrAuto$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="configure"><a href='../../mlr3/html/Learner.html#method-Learner-configure'><code>mlr3::Learner$configure()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="encapsulate"><a href='../../mlr3/html/Learner.html#method-Learner-encapsulate'><code>mlr3::Learner$encapsulate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict"><a href='../../mlr3/html/Learner.html#method-Learner-predict'><code>mlr3::Learner$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="selected_features"><a href='../../mlr3/html/Learner.html#method-Learner-selected_features'><code>mlr3::Learner$selected_features()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="train"><a href='../../mlr3/html/Learner.html#method-Learner-train'><code>mlr3::Learner$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrAuto-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrAuto-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrAuto$new(id = "regr.auto", learner_ids)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier for the new instance.}

\item{\code{learner_ids}}{(\code{character()})\cr
Learner that should be used.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrAuto-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrAuto-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrAuto$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
